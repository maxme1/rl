from .dqn import *
from functools import partial

import gym

from rl_utils.wrappers import SlidingWindow, ChangeState
from dpipe.train import LambdaEpoch, train, TimeProfiler
from rl_utils.training import DetachValue
from rl_utils.dqn import q_update, describe_dqn
from rl_utils.memory import ExpirationMemory
from rl_utils.utils import linear_trend
from rl_utils.envs import LambdaWrapper


def make_env():
    return LambdaWrapper(gym.make('BreakoutDeterministic-v4'), lambda x: x.mean(-1).astype('uint8'))


eps = LambdaEpoch(linear_trend, 0.95, 0.05, 200)
n_actions = make_env().action_space.n
memory = ExpirationMemory(100_000, 2 / 5)
batches_per_epoch = 1000
n_frames = 6
n_steps = 1
gamma = 0.99
n_epochs = 1000

wrap_episode = lambda episode: ChangeState(SlidingWindow(episode, n_frames), lambda x: np.float32(x / 255))

train_agent = train(
    q_update, batch_iter, agent=agent, target_agent=target, updater=updater,
    eps=DetachValue(eps), checkpoints=checkpoints, logger=logger, max_grad_norm=1,
    optimizer=optimizer, n_epochs=n_epochs, lr=1e-4, gamma=gamma,
    profiler=TimeProfiler(logger.logger),
    validate=partial(describe_dqn, memory, agent, gamma)
)
